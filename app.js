/* app.js */
(() => {
  /* ---------- helpers ---------- */
  const tg = window.Telegram?.WebApp || { expand(){}, sendData:console.log };
  tg.expand();

  // query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã ?bal=### ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const params       = new URLSearchParams(location.search);
  let balance        = parseInt(params.get('bal'));   // undefined  ‚Üí NaN
  if (isNaN(balance)) balance = null;                 // ¬´–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ¬ª

  const balanceEl    = document.getElementById('balance');
  const stakeInputEl = document.getElementById('stakeInput');
  const infoEl       = document.getElementById('info');

  const refreshUI = () => {
    balanceEl.textContent = `–ë–∞–ª–∞–Ω—Å: ${balance ?? '‚Ä¶'} ü™ô`;
    infoEl.textContent    = `–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–∏–Ω–∞: ${stake()} ü™ô`;
  };
  const stake = () => Math.max(1, parseInt(stakeInputEl.value) || 1);

  refreshUI();

  /* ---------- wheel config ---------- */
  const segments = ['0 ü™ô', '2 ü™ô', '0 ü™ô',
                    '2 ü™ô', '0 ü™ô', '2 ü™ô',
                    '55 ü™ô JACKPOT'];
  const values   = segments.map(s => parseInt(s));          // [0,2,0,2,0,2,55]
  const weights  = [200,100,200,100,200,100,1];
  const colours  = ['#f44336','#e91e63','#9c27b0',
                    '#673ab7','#3f51b5','#2196f3',
                    '#009688'];

  const wheel = new Winwheel({
    canvasId    : 'canvas',
    numSegments : segments.length,
    pointerAngle: 0,
    outerRadius : 150,
    segments    : segments.map((text,i)=>({ fillStyle:colours[i], text })),
    textFontSize: 18,
    animation   : {
      type            : 'spinToStop',
      duration        : 8,
      spins           : 8,
      callbackFinished: () => {
        const idx      = wheel.getIndicatedSegmentNumber() - 1;
        const stakeVal = stake();
        tg.sendData(JSON.stringify({ type:'spinResult', idx, stake:stakeVal }));

        /* –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω */
        if (balance !== null) {
          const prize = values[idx] * stakeVal;
          balance += prize - stakeVal;        // (-—Å—Ç–∞–≤–∫–∞ + –≤—ã–∏–≥—Ä—ã—à)
          refreshUI();
        }
      }
    }
  });

  /* ---------- spin button ---------- */
  const btn = document.getElementById('spinBtn');

  btn.addEventListener('click', () => {
    if (wheel.animation.spinning) return;          // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª-–∫–ª–∏–∫–∞

    // –±–∞–ª–∞–Ω—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Üí –ø–æ–∑–≤–æ–ª—è–µ–º –∫—Ä—É—Ç–∏—Ç—å; –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if (balance !== null && balance < stake()) {
      tg.showAlert?.('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');      // –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      return;
    }

    /* —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª—ë—Å–æ (–∏–Ω–∞—á–µ –≤—Ç–æ—Ä–æ–π —Å–ø–∏–Ω ¬´—Ç—É–≥–æ–π¬ª) */
    wheel.stopAnimation(false);
    wheel.rotationAngle = 0;
    wheel.draw();

    /* –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–∫—Ç–æ—Ä —Å —É—á—ë—Ç–æ–º –≤–µ—Å–æ–≤ */
    const total = weights.reduce((s,w)=>s+w,0);
    let r       = Math.random()*total, acc=0, idx=0;
    for (let i=0;i<weights.length;i++){ acc+=weights[i]; if(r<acc){ idx=i; break; } }

    /* –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é */
    wheel.animation.stopAngle = wheel.getRandomForSegment(idx+1);
    wheel.startAnimation();

    /* —Å—Ä–∞–∑—É —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É (–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–≤–µ—Å—Ç–µ–Ω) */
    if (balance !== null) {
      balance -= stake();
      refreshUI();
    }
  });

  /* –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏ -- –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ø–æ–¥–ø–∏—Å–∏ */
  stakeInputEl.addEventListener('input', refreshUI);
})();
